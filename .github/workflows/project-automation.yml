# .github/workflows/project-automation.yml
# (c) 2025 Asymmetric Effort, LLC. <scaldwell@asymmetric-effort.com>
on:
  push:
    branches:
      - '**'
    paths:
      - '.github/workflows/project-automation.yml'
      - 'PROJECT.yaml'

permissions:
  contents: read
  repository-projects: write

jobs:
  manage_project:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Install deps
        run: |
          sudo apt-get update && sudo apt-get install -y jq yq

      - name: Read PROJECT.yaml
        id: load
        run: |
          echo "::set-output name=meta::$(yq eval -o=json '.project' PROJECT.yaml)"
          echo "::set-output name=meta::$(yq eval -o=json '.project.title' PROJECT.yaml)"
          echo "::set-output name=fields::$(yq eval -o=json '.fields' PROJECT.yaml)"
          echo "::set-output name=issues::$(yq eval -o=json '.issues' PROJECT.yaml)"

      - name: Create or get project
        id: proj
        run: |
          PROJECT_ID=$(echo "${{ steps.load.outputs.meta }}" \
            | jq -r '"\(.owner)"' \
            | xargs -I% gh project list --owner % --json id,number,title \
                | jq -r ".[] | select(.title==\"${{ steps.load.outputs.title }}\") | .id")
          if [ -z "$PROJECT_ID" ]; then
            gh project create \
              --owner "$(echo '${{ steps.load.outputs.meta }}' | jq -r .owner)" \
              --title "$(echo '${{ steps.load.outputs.meta }}' | jq -r .title)" \
              --description "$(echo '${{ steps.load.outputs.meta }}' | jq -r .description)" \
              --public false --format json \
              | jq -r .id > project.id
            PROJECT_ID=$(cat project.id)
          fi
          echo "::set-output name=id::$PROJECT_ID"

      - name: Create fields
        run: |
          for i in $(echo '${{ steps.load.outputs.fields }}' | jq -c '.[]'); do
            NAME=$(echo $i | jq -r .name)
            TYPE=$(echo $i | jq -r .type)
            gh project field-create "${{ steps.proj.outputs.id }}" \
              --name "$NAME" --type "$TYPE" \
              --format json > /dev/null || true
          done

      - name: Add issues & cards
        run: |
          for issue in $(echo '${{ steps.load.outputs.issues }}' | jq -c '.[]'); do
            IT=$(echo $issue | jq -r .title)
            B=$(echo $issue | jq -r .body)
            L=$(echo $issue | jq -r '.labels|join(",")')
            A=$(echo $issue | jq -r .assignee)
            # create issue
            NUM=$(gh issue create --title "$IT" --body "$B" \
                 --label "$L" --assignee "$A" --format json \
                 | jq -r .number)
            # add to project
            ITEM_ID=$(gh project item add "${{ steps.proj.outputs.id }}" \
              --issue "${{ steps.load.outputs.meta.owner }}/$(basename $GITHUB_REPOSITORY)#$NUM" \
              --format json | jq -r .id)
            # set field-values
            for fv in $(echo $issue | jq -c '.fields|to_entries[]'); do
              FN=$(echo $fv | jq -r .key)
              VAL=$(echo $fv | jq -r .value)
              gh project field-value set "$ITEM_ID" \
                --field "$FN" --value "$VAL"
            done
          done
